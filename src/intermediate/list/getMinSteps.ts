// 自然数 n が与えられるので、以下の 3 つのステップのうち、どれかを実行し、n を 1 にする最小のステップ数を返す getMinSteps という関数を作成してください。

// n から 1 を引く。
// 2 で割り切れるなら n を 2 で割る。
// 3 で割り切れるなら n を 3 で割る。
// 例えば、n = 1 の場合、すでに条件を満たしているため、0 を返します。n = 4 の場合、4/2 = 2、2/2 = 1 の計 2 ステップとなります。注意すべきは、n = 10 のような場合、10/2 = 5、5-1 = 4、4/2 = 2、2/2 = 1 の計 4 ステップではなく、10-1 = 9、9/3 = 3、3/3 = 1 の計 3 ステップが最適解となります。

// 関数の入出力例
// 入力のデータ型： integer n
// 出力のデータ型： integer
// getMinSteps(1) --> 0
// getMinSteps(4) --> 2
// getMinSteps(10) --> 3

function getMinSteps(n:number) {
  // 関数を完成させてください
}