挿入ソートと選択ソートのどちらが優れているかについて、最適な状況で比較すると挿入ソートが優れていることが分かりました。ただし、普通の場合は配列がソートされていないので、最悪の場合は O(n^2) という遅い計算速度になってしまいます。

しかし、この問題を解決するために、数学者やコンピュータ科学者たちはさまざまな方法を考案しました。その中でも、分割統治法（divide-and-conquer method）という方法が生まれました。

分割統治法は、コンピュータサイエンスで使われるアルゴリズムの一つで、次の 3 つのステップを再帰的に実装することで問題を解決する方法です。

分割: 問題全体を同じ構造の小さな問題に分割します。
統治: 分割した問題を、それ以上分割できない規模になるまで解きます。
合併: 解いた多数の部分問題の解を、分割と逆の順番に併合していき、全体を一つに統合します。

このように、問題を複数の部分問題に分割し、それぞれの部分問題を再帰的に解き、その計算結果を合併（マージ）することで元の問題を解くアルゴリズムを分割統治法といいます。動的計画法を学びましたが、分割統治法は少し違う手法です。分割統治法は問題を部分問題に分割しますが、これらの部分問題は重複せず、それぞれ独立的に解きます。


分割統治法を使って、数字が並んだリスト（配列）の合計を計算する方法を考えます。例えば、リスト [1,2,3,4,5] の合計を求めます。分割統治法では、まずリストを小さな部分リストに分けて、それらの結果を組み合わせます。手順は以下の通りです。

リストを同じ大きさの 2 つの部分リストに分けます。例では、[1,2] と [3,4,5] に分けます。
それぞれの部分リストの合計を計算します。これも同じ手順で計算するので、繰り返し（再帰）して計算します。
左の部分リスト [1,2] をさらに [1] と [2] に分け、それらの合計 1 + 2 = 3 を求めます。
右の部分リスト [3,4,5] を [3] と [4,5] に分け、それらの合計 3 + (4 + 5) = 12 を求めます。
最後に、左右の部分リストの合計 3 + 12 = 15 を求めます。
この手順を繰り返す関数を作成することで、リストの合計を求めることができます。リストが要素1つだけになった時点で、その値を返し、最後に全部の部分リストの合計値を足し合わせて、リスト全体の合計値を求めます。

function sumOfArray(arr) {
    return sumOfArrayHelper(arr, 0, arr.length-1);
}

function sumOfArrayHelper(arr, start, end){
    if(start == end) return arr[start];

    let mid = Math.floor((start+end)/2);

    let leftArr = sumOfArrayHelper(arr, start, mid);
    let rightArr = sumOfArrayHelper(arr, mid+1, end);
    // 単一要素同士を足します
    return leftArr + rightArr;
}

let arr = [2,4,6,8,10,12];
console.log(sumOfArray(arr));

//[2, 4, 6, 8, 10, 12] -> length 6

// sumOfArrayHelper([2, 4, 6, 8, 10, 12], 0, 5); 12 + 30 = 42
// left: ([2, 4, 6, 8, 10, 12], 0, 2) = 6 + 6 = 12                                             right: ([2, 4, 6, 8, 10, 12], 3, 5) = 18 + 12 = 30
// left: ([2, 4, 6, 8, 10, 12], 0, 1) = 4 + 2 = 6  right: ([2, 4, 6, 8, 10, 12], 2, 2) = 6     left: ([2, 4, 6, 8, 10, 12], 3, 4) = 8 + 10 right: ([2, 4, 6, 8, 10, 12], 5, 5) = 12
// left: ([2, 4, 6, 8, 10, 12], 0, 0) = 2 right: ([2, 4, 6, 8, 10, 12], 1, 1) = 4              left: ([2, 4, 6, 8, 10, 12], 3, 3) = 8 right: left: ([2, 4, 6, 8, 10, 12], 4, 4) = 10