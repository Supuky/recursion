// 挿入ソート
// 1 つずつ順番に要素を取り出し、その要素をソート済みの部分の適切な場所に挿入していくソートアルゴリズムを挿入ソート（insertion sort）といいます。このアルゴリズムは選択ソートと同じように、追加のスペースを必要とせず、in-placeソートのアルゴリズムです。


// 配列を挿入ソートでソートするには、最初に最初の要素をソート済みの部分と見なします。その後、残りの配列を処理し、各要素をソート済み部分の適切な場所に挿入します。要素を挿入する際には、ソート済み部分の要素を右にずらして、新しい要素のためのスペースを作成します。

function insertionSort(list: number[]) {
  let n: number = list.length;

  for (let i = 1; i < n; i++){
      let currentValue: number = list[i];

      // currentValue の左側を探索し、挿入できる箇所を探索します
      for (let j = i - 1; j >= 0; j--){
          // currentValue が小さい場合は、値を入れ替えていきます
          if (currentValue <= list[j]){
              list[j+1] = list[j];
              list[j] = currentValue;
          }    
          // currentValue が大きい場合は、それは正しい位置にあるので、ループを終了して i+1 に移動します
          else break;
      }    
  }
}

let array: number[] = [34,4546,32,3,2,8,6,76,56,45,34,566,1];

// 昇順に並び替え
insertionSort(array);

// ソートされた配列
console.log(array);

// 挿入ソートの最悪のケースは、配列が「5 4 3 2 1」のような並びをしている場合です。毎回、挿入するべき要素を先頭まで持っていく必要があるので、必要な計算量は以下のようになります。

// したがって、挿入ケースにおける最悪計算量は、O(n^2) になります。一方、すでにソートされている場合は、ソート済みのデータはソートする必要がありません。したがって、1 回の比較を n-1 回することになるので、1 + 1 + 1 .... + 1 = n - 1 となり、最良計算量は、O(n) になります。
  
//   挿入ソートはランキングシステムによく使われています。ランキングシステムでは、新しいエントリを追加する前に、全てのデータがソートされていると仮定されているため、計算量が膨大にならないからです。
  
  